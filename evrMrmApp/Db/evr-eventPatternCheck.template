# This templates stores pulse ID and event received/not received information in two waveforms.
# This way the user can inspect event arrival corelated to pulse IDs.
#
#
# Mandatory macros:
#  SYS = System name
#  DEVICE = Event receiver / timing card name (same as mrmEvrSetupVME()) Eg. EVR0
#  
#  EVT = event number we are interested in. Eg. 6 for RF OFF beam event
#
# Optional macros:
#  TRIGER_ACQUISITION = Timing event number, which is fired when we want to capture event status and pulse ID. 
#                       Usually this is near the end of the event sequence. Eg. BS read event. Default: 28
#  N_SAMPLES = Number of samples the buffer for event statuses and pulse IDs will hold. Default: 200
#  DISABLE = Disables (1) or enables (0) acquisition of event statuses and pulse IDs. Default 0 (enabled)
#  
# Important records:
#  $(SYS)-$(DEVICE):PTRN-$(EVT)-EVTBUF   -> A buffer with event statuses. 
#                                           Each entry corresponds to one acquisition triggered by $(SYS)-$(DEVICE):PTRN-$(EVT)-EVT-TRIG record.
#                                           Event arrival is signaled by $(SYS)-$(DEVICE):PTRN-$(EVT)-EVT-TRIG record.
#                                           Value 0 means event event EVT did not arrive in the time between last and this acquisition was triggered
#                                           Value 1 means event event EVT did arrive in the time between last and this acquisition was triggered
#  $(SYS)-$(DEVICE):PTRN-$(EVT)-PIDBUF   -> Stores the current Pulse ID each time acquisition is triggered. Entry in this record can be compared to 
#                                           entries in $(SYS)-$(DEVICE):PTRN-$(EVT)-EVTBUF to see if event did or did not arrive in this pulse ID.
#  $(SYS)-$(DEVICE):PTRN-$(EVT)-EVT-TRIG -> Processed when EVT event is received.
#  $(SYS)-$(DEVICE):PTRN-$(EVT)-TRIG     -> Processed when TRIGER_ACQUISITION event is received.
#  $(SYS)-$(DEVICE):PTRN-$(EVT)-DISABLE  -> see description for optional macro DISABLE.
# 


# Processed whenever event is received
record(event, "$(SYS)-$(DEVICE):PTRN-$(EVT)-EVT-TRIG") {         
        field(DESC, "Event $(EVT) received")
        field(DTYP, "EVR Event")
        field(SCAN, "I/O Intr")
        field(INP,  "@OBJ=$(DEVICE),Code=$(EVT)")
        field(VAL,  "0")

        field(SDIS, "$(SYS)-$(DEVICE):PTRN-$(EVT)-DISABLE")
        field(FLNK, "$(SYS)-$(DEVICE):PTRN-$(EVT)-EVT-SET_")
}



# Triggers acquisition of data
record(event, "$(SYS)-$(DEVICE):PTRN-$(EVT)-TRIG") {
        field(DESC, "Acquisition trigger")
        field(DTYP, "EVR Event")
        field(SCAN, "I/O Intr")
        field(INP,  "@OBJ=$(DEVICE),Code=$(TRIGER_ACQUISITION=28)")
        field(VAL,  "0")
        field(FLNK, "$(SYS)-$(DEVICE):PTRN-$(EVT)-EVTBUF")

        field(SDIS, "$(SYS)-$(DEVICE):PTRN-$(EVT)-DISABLE")
}

# Saves event status (1: arrived, 0: not arrived)
record(compress, "$(SYS)-$(DEVICE):PTRN-$(EVT)-EVTBUF") {      
        field(DESC, "Event $(EVT) arrived(1) / not arrived(0)")   
        field(ALG,  "Circular Buffer")
        field(INP,  "$(SYS)-$(DEVICE):PTRN-$(EVT)-STAT.VAL NPP")
        field(NSAM, "$(N_SAMPLES=200)")			
        field(FLNK, "$(SYS)-$(DEVICE):PTRN-$(EVT)-PIDBUF")			
}

# Saves pulse ID
record(compress, "$(SYS)-$(DEVICE):PTRN-$(EVT)-PIDBUF") {
        field(DESC, "Pulse ID synced with event status")
        field(ALG,  "Circular Buffer")
        field(INP,  "$(SYS)-$(DEVICE):RX-PULSEID NPP")
        field(NSAM, "$(N_SAMPLES=200)")			
        field(FLNK, "$(SYS)-$(DEVICE):PTRN-$(EVT)-RESET_")			
}

# Resets event status to 0 after acquisition
record(bo, "$(SYS)-$(DEVICE):PTRN-$(EVT)-RESET_") {
        field(DESC, "Reset $(EVT) status to 0")
        field(DOL, "0")
        field(OUT, "$(SYS)-$(DEVICE):PTRN-$(EVT)-STAT PP")
}

# Sets event status to 1 after event is received
record(bo, "$(SYS)-$(DEVICE):PTRN-$(EVT)-EVT-SET_") {
        field(DESC, "Sets $(EVT) status to 1")
        field(DOL,  "1")
        field(OUT,  "$(SYS)-$(DEVICE):PTRN-$(EVT)-STAT PP")
}

# This record is:
# - reset by $(SYS)-$(DEVICE):PTRN-$(EVT)-RESET_ after acquiring data
# - set   by $(SYS)-$(DEVICE):PTRN-$(EVT)-EVT-TRIG after event arrived
record(bo, "$(SYS)-$(DEVICE):PTRN-$(EVT)-STAT") {
        field(DESC, "Event arrived or not arrived")
        field(ZNAM, "No event $(EVT)")
        field(ONAM, "Event $(EVT) arrived")
}


# Enable or disable triggers / acquisition
record(bi, "$(SYS)-$(DEVICE):PTRN-$(EVT)-DISABLE") {
        field(DESC, "Disable acquisition")

        field(ZNAM, "Enable")
        field(ONAM, "Disable")

        field(VAL,  "$(DISABLE=0)")
        field(PINI, "YES")
}
